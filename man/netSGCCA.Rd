% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/netSGCCA.R
\name{netSGCCA}
\alias{netSGCCA}
\title{netSGCCA function}
\usage{
netSGCCA(data, design, s, gamma, lambda, Laplacian_list, epsilon, iter_max)
}
\arguments{
\item{data}{is a list with all the blocks}

\item{design}{is the design matrix}

\item{s}{is a list of the quantity of sparsity for each block.  It is the radius of the l1 norm ball for weigth vector of the each block
For blocks associated with graph, s must be strictly greater than 1. If a block is not associated with a graph, put the square-root of his column number}

\item{gamma}{is a regulatory parameter between the GraphNet penalty. It's a vector with the same size of data.}

\item{lambda}{is a regulatory parameter between the interaction between blocks and the GraphNet penalty.  0<= lambda <1}

\item{Laplacian_list}{is a list of the Laplacian matrix in the same order of data
If one block doesn't have a graph, so it doesn't have a Laplacian_matrix, put a square matrix of zero of the block size}

\item{epsilon}{is a stop condition}

\item{iter_max}{is the maximal number of iteration}
}
\value{
The function netSGCCA returns a list of with weight vectors of each block and the component associated with each block
}
\description{
netSGCCA function
}
\examples{
library(igraph)
W <- matrix(rnorm(200, mean = 9, sd = 3), nrow=10)
g1 <- sample_grg(ncol(W),0.4)

Q <-  matrix(rnorm(100, mean = 5, sd = 3), nrow=10)
g2 <-  sample_grg(ncol(Q),0.3)

P <- matrix(rnorm(150, mean = 2, sd = 1), nrow=10)
g3 <-  sample_grg(ncol(P),0.6)

R= matrix(rnorm(30, 0), nrow=10)

##Laplacian Matrix
L= Laplacian_matrix(g1, 0.3)$Laplacian
M = matrix(0, ncol=ncol(R), nrow=ncol(R))
N =Laplacian_matrix(g2, 0.3)$Laplacian
O =Laplacian_matrix(g3, 0.3)$Laplacian
data= list(W, R, Q, P)
Laplacian_list=list(L, M, N, O)
gamma=rep(0.5, length(data))
design=matrix(c(0,1,1,1, 1,0,1,1, 1,1,0, 1, 1,1,1,0), ncol=length(data))
lambda=0.5
s= c(0.5*sqrt(ncol(W)),sqrt(ncol(R)), 2.5, sqrt(ncol(P)) )
graphs <- list(g1, NA, g2, g3)
iter_max=100
epsilon=1e-10
netSGCCA(data, design, s, gamma, lambda, Laplacian_list, epsilon, iter_max)
}
